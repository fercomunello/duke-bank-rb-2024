############### BANK DATABASE ###############

database.name=rinhadb
database.port=5432
database.schema=api
database.url=vertx-reactive:postgresql://:${database.port}/${database.name}\
  ?search_path=${database.schema}&loggerLevel=OFF

quarkus.datasource.reactive=true
quarkus.datasource.db-kind=postgresql
quarkus.datasource.reactive.url=${database.url}
quarkus.datasource.username=duke
quarkus.datasource.password=duke

# Cache prepared statements on the client side
quarkus.datasource.reactive.cache-prepared-statements=true

############### DEV / TEST ###############

# Enables metrics and logging to help on troubleshooting
%dev.quarkus.datasource.metrics.enabled=true
%dev.quarkus.log.console.enable=true
%dev.quarkus.log.min-level=DEBUG
%dev.quarkus.log.category."com.github.bank.duke".level=DEBUG

# Default continuous testing mode:
#  Press R on dev-mode to re-run all tests or run via Dev UI Console
%dev.quarkus.test.continuous-testing=paused

#  Reusing containers: Once the containers started, they will stay up and running during development.
#  To speed up the testing even more, it is possible to re-use containers even after
#  context restarts, please edit ~/.testcontainers: testcontainers.reuse.enable=true
%test.quarkus.datasource.devservices.enabled=true
%test.quarkus.datasource.devservices.reuse=true

# Configure a separated database container only for testing:
# The database schema is regenerated whenever we run the test suite or call bankSchema.regenerate()
# NOTE: If we do not specify a port like 5433, test containers will assume a random port
%test.database.port=5433
quarkus.datasource.devservices.image-name=postgres:16.1-bullseye
quarkus.datasource.devservices.db-name=${database.name}
quarkus.datasource.devservices.properties.search_path=${database.schema}
quarkus.datasource.devservices.port=${database.port}

# This allows us to run tests while having the application running in parallel
%test.quarkus.http.test-port=8090
%test.quarkus.http.test-ssl-port=8453

# Caching prepared statements may cause issues in dev mode, this should only be used in production
%dev.quarkus.datasource.reactive.cache-prepared-statements=false
%test.quarkus.datasource.reactive.cache-prepared-statements=false